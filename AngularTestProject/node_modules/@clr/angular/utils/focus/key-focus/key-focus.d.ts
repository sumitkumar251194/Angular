import { ElementRef } from '@angular/core';
import { ClrFocusDirection } from './enums/focus-direction.enum';
import { FocusableItem } from './interfaces';
import * as ɵngcc0 from '@angular/core';
export declare class ClrKeyFocus {
    private elementRef;
    constructor(elementRef: ElementRef);
    direction: ClrFocusDirection;
    focusOnLoad: boolean;
    private focusChange;
    private clrKeyFocusItems;
    private _focusableItems;
    set focusableItems(elements: Array<FocusableItem>);
    get nativeElement(): HTMLElement;
    get focusableItems(): Array<FocusableItem>;
    private _current;
    get current(): number;
    set current(value: number);
    get currentItem(): FocusableItem;
    get currentItemElement(): HTMLElement;
    focusCurrent(): void;
    moveTo(position: number): void;
    private subscriptions;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    handleKeyboardEvent(event: KeyboardEvent): void;
    setClickedItemCurrent(event: any): void;
    private getItemPosition;
    private positionInRange;
    private currentFocusIsNotFirstItem;
    private currentFocusIsNotLastItem;
    private initializeFocus;
    private listenForItemUpdates;
    private nextKeyPressed;
    private prevKeyPressed;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrKeyFocus>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrKeyFocus, "[clrKeyFocus]", never, {
    "direction": "clrDirection";
    "focusOnLoad": "clrFocusOnLoad";
    "focusableItems": "clrKeyFocus";
}, {
    "focusChange": "clrFocusChange";
}, ["clrKeyFocusItems"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5LWZvY3VzLmQudHMiLCJzb3VyY2VzIjpbImtleS1mb2N1cy5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQStCQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENsckZvY3VzRGlyZWN0aW9uIH0gZnJvbSAnLi9lbnVtcy9mb2N1cy1kaXJlY3Rpb24uZW51bSc7XG5pbXBvcnQgeyBGb2N1c2FibGVJdGVtIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENscktleUZvY3VzIHtcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZik7XG4gICAgZGlyZWN0aW9uOiBDbHJGb2N1c0RpcmVjdGlvbjtcbiAgICBmb2N1c09uTG9hZDogYm9vbGVhbjtcbiAgICBwcml2YXRlIGZvY3VzQ2hhbmdlO1xuICAgIHByaXZhdGUgY2xyS2V5Rm9jdXNJdGVtcztcbiAgICBwcml2YXRlIF9mb2N1c2FibGVJdGVtcztcbiAgICBzZXQgZm9jdXNhYmxlSXRlbXMoZWxlbWVudHM6IEFycmF5PEZvY3VzYWJsZUl0ZW0+KTtcbiAgICBnZXQgbmF0aXZlRWxlbWVudCgpOiBIVE1MRWxlbWVudDtcbiAgICBnZXQgZm9jdXNhYmxlSXRlbXMoKTogQXJyYXk8Rm9jdXNhYmxlSXRlbT47XG4gICAgcHJpdmF0ZSBfY3VycmVudDtcbiAgICBnZXQgY3VycmVudCgpOiBudW1iZXI7XG4gICAgc2V0IGN1cnJlbnQodmFsdWU6IG51bWJlcik7XG4gICAgZ2V0IGN1cnJlbnRJdGVtKCk6IEZvY3VzYWJsZUl0ZW07XG4gICAgZ2V0IGN1cnJlbnRJdGVtRWxlbWVudCgpOiBIVE1MRWxlbWVudDtcbiAgICBmb2N1c0N1cnJlbnQoKTogdm9pZDtcbiAgICBtb3ZlVG8ocG9zaXRpb246IG51bWJlcik6IHZvaWQ7XG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgaGFuZGxlS2V5Ym9hcmRFdmVudChldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgc2V0Q2xpY2tlZEl0ZW1DdXJyZW50KGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIHByaXZhdGUgZ2V0SXRlbVBvc2l0aW9uO1xuICAgIHByaXZhdGUgcG9zaXRpb25JblJhbmdlO1xuICAgIHByaXZhdGUgY3VycmVudEZvY3VzSXNOb3RGaXJzdEl0ZW07XG4gICAgcHJpdmF0ZSBjdXJyZW50Rm9jdXNJc05vdExhc3RJdGVtO1xuICAgIHByaXZhdGUgaW5pdGlhbGl6ZUZvY3VzO1xuICAgIHByaXZhdGUgbGlzdGVuRm9ySXRlbVVwZGF0ZXM7XG4gICAgcHJpdmF0ZSBuZXh0S2V5UHJlc3NlZDtcbiAgICBwcml2YXRlIHByZXZLZXlQcmVzc2VkO1xufVxuIl19