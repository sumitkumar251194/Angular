import { Observable } from 'rxjs';
import { FiltersProvider } from './filters';
import { Items } from './items';
import { SelectionType } from '../enums/selection-type';
import * as ɵngcc0 from '@angular/core';
export declare class Selection<T = any> {
    private _items;
    private _filters;
    id: string;
    preserveSelection: boolean;
    private prevSelectionRefs;
    private prevSingleSelectionRef;
    private lockedRefs;
    constructor(_items: Items<T>, _filters: FiltersProvider<T>);
    clearSelection(): void;
    private _selectionType;
    get selectionType(): SelectionType;
    set selectionType(value: SelectionType);
    /** @deprecated since 2.0, remove in 3.0 */
    rowSelectionMode: boolean;
    private get _selectable();
    /**
     * Ignore items changes in the same change detection cycle.
     */
    private debounce;
    /**
     * Subscriptions to the other providers changes.
     */
    private subscriptions;
    /**
     * Cleans up our subscriptions to other providers
     */
    destroy(): void;
    /**
     * The current selection in single selection type
     */
    private _currentSingle;
    get currentSingle(): T;
    set currentSingle(value: T);
    /**
     * The current selection
     */
    private _current;
    get current(): T[];
    set current(value: T[]);
    updateCurrent(value: T[], emit: boolean): void;
    /**
     * The Observable that lets other classes subscribe to selection changes
     */
    private _change;
    private emitChange;
    get change(): Observable<T[] | T>;
    /**
     * Checks if an item is currently selected
     */
    isSelected(item: T): boolean;
    /**
     * Selects an item
     */
    private selectItem;
    /**
     * Deselects an item
     */
    private deselectItem;
    /**
     * Selects or deselects an item
     */
    setSelected(item: T, selected: boolean): void;
    /**
     * Checks if all currently displayed items are selected
     */
    isAllSelected(): boolean;
    /**
     * Make sure that it could be locked
     *
     * @remark
     * Check also is items.all an array, if not there is no nothing to lock or compare to
     *
     */
    private canItBeLocked;
    /**
     * Lock and unlock item
     */
    lockItem(item: T, lock: boolean): void;
    /**
     * Check is item locked or not by searcing into lockedRefs for entry
     */
    isLocked(item: T): boolean;
    /**
     * Selects or deselects all currently displayed items
     */
    toggleAll(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Selection<any>>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<Selection<any>>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0aW9uLmQudHMiLCJzb3VyY2VzIjpbInNlbGVjdGlvbi5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVGQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEZpbHRlcnNQcm92aWRlciB9IGZyb20gJy4vZmlsdGVycyc7XG5pbXBvcnQgeyBJdGVtcyB9IGZyb20gJy4vaXRlbXMnO1xuaW1wb3J0IHsgU2VsZWN0aW9uVHlwZSB9IGZyb20gJy4uL2VudW1zL3NlbGVjdGlvbi10eXBlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNlbGVjdGlvbjxUID0gYW55PiB7XG4gICAgcHJpdmF0ZSBfaXRlbXM7XG4gICAgcHJpdmF0ZSBfZmlsdGVycztcbiAgICBpZDogc3RyaW5nO1xuICAgIHByZXNlcnZlU2VsZWN0aW9uOiBib29sZWFuO1xuICAgIHByaXZhdGUgcHJldlNlbGVjdGlvblJlZnM7XG4gICAgcHJpdmF0ZSBwcmV2U2luZ2xlU2VsZWN0aW9uUmVmO1xuICAgIHByaXZhdGUgbG9ja2VkUmVmcztcbiAgICBjb25zdHJ1Y3RvcihfaXRlbXM6IEl0ZW1zPFQ+LCBfZmlsdGVyczogRmlsdGVyc1Byb3ZpZGVyPFQ+KTtcbiAgICBjbGVhclNlbGVjdGlvbigpOiB2b2lkO1xuICAgIHByaXZhdGUgX3NlbGVjdGlvblR5cGU7XG4gICAgZ2V0IHNlbGVjdGlvblR5cGUoKTogU2VsZWN0aW9uVHlwZTtcbiAgICBzZXQgc2VsZWN0aW9uVHlwZSh2YWx1ZTogU2VsZWN0aW9uVHlwZSk7XG4gICAgLyoqIEBkZXByZWNhdGVkIHNpbmNlIDIuMCwgcmVtb3ZlIGluIDMuMCAqL1xuICAgIHJvd1NlbGVjdGlvbk1vZGU6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBnZXQgX3NlbGVjdGFibGUoKTtcbiAgICAvKipcbiAgICAgKiBJZ25vcmUgaXRlbXMgY2hhbmdlcyBpbiB0aGUgc2FtZSBjaGFuZ2UgZGV0ZWN0aW9uIGN5Y2xlLlxuICAgICAqL1xuICAgIHByaXZhdGUgZGVib3VuY2U7XG4gICAgLyoqXG4gICAgICogU3Vic2NyaXB0aW9ucyB0byB0aGUgb3RoZXIgcHJvdmlkZXJzIGNoYW5nZXMuXG4gICAgICovXG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zO1xuICAgIC8qKlxuICAgICAqIENsZWFucyB1cCBvdXIgc3Vic2NyaXB0aW9ucyB0byBvdGhlciBwcm92aWRlcnNcbiAgICAgKi9cbiAgICBkZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgc2VsZWN0aW9uIGluIHNpbmdsZSBzZWxlY3Rpb24gdHlwZVxuICAgICAqL1xuICAgIHByaXZhdGUgX2N1cnJlbnRTaW5nbGU7XG4gICAgZ2V0IGN1cnJlbnRTaW5nbGUoKTogVDtcbiAgICBzZXQgY3VycmVudFNpbmdsZSh2YWx1ZTogVCk7XG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgc2VsZWN0aW9uXG4gICAgICovXG4gICAgcHJpdmF0ZSBfY3VycmVudDtcbiAgICBnZXQgY3VycmVudCgpOiBUW107XG4gICAgc2V0IGN1cnJlbnQodmFsdWU6IFRbXSk7XG4gICAgdXBkYXRlQ3VycmVudCh2YWx1ZTogVFtdLCBlbWl0OiBib29sZWFuKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBUaGUgT2JzZXJ2YWJsZSB0aGF0IGxldHMgb3RoZXIgY2xhc3NlcyBzdWJzY3JpYmUgdG8gc2VsZWN0aW9uIGNoYW5nZXNcbiAgICAgKi9cbiAgICBwcml2YXRlIF9jaGFuZ2U7XG4gICAgcHJpdmF0ZSBlbWl0Q2hhbmdlO1xuICAgIGdldCBjaGFuZ2UoKTogT2JzZXJ2YWJsZTxUW10gfCBUPjtcbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYW4gaXRlbSBpcyBjdXJyZW50bHkgc2VsZWN0ZWRcbiAgICAgKi9cbiAgICBpc1NlbGVjdGVkKGl0ZW06IFQpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNlbGVjdHMgYW4gaXRlbVxuICAgICAqL1xuICAgIHByaXZhdGUgc2VsZWN0SXRlbTtcbiAgICAvKipcbiAgICAgKiBEZXNlbGVjdHMgYW4gaXRlbVxuICAgICAqL1xuICAgIHByaXZhdGUgZGVzZWxlY3RJdGVtO1xuICAgIC8qKlxuICAgICAqIFNlbGVjdHMgb3IgZGVzZWxlY3RzIGFuIGl0ZW1cbiAgICAgKi9cbiAgICBzZXRTZWxlY3RlZChpdGVtOiBULCBzZWxlY3RlZDogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGFsbCBjdXJyZW50bHkgZGlzcGxheWVkIGl0ZW1zIGFyZSBzZWxlY3RlZFxuICAgICAqL1xuICAgIGlzQWxsU2VsZWN0ZWQoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBNYWtlIHN1cmUgdGhhdCBpdCBjb3VsZCBiZSBsb2NrZWRcbiAgICAgKlxuICAgICAqIEByZW1hcmtcbiAgICAgKiBDaGVjayBhbHNvIGlzIGl0ZW1zLmFsbCBhbiBhcnJheSwgaWYgbm90IHRoZXJlIGlzIG5vIG5vdGhpbmcgdG8gbG9jayBvciBjb21wYXJlIHRvXG4gICAgICpcbiAgICAgKi9cbiAgICBwcml2YXRlIGNhbkl0QmVMb2NrZWQ7XG4gICAgLyoqXG4gICAgICogTG9jayBhbmQgdW5sb2NrIGl0ZW1cbiAgICAgKi9cbiAgICBsb2NrSXRlbShpdGVtOiBULCBsb2NrOiBib29sZWFuKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDaGVjayBpcyBpdGVtIGxvY2tlZCBvciBub3QgYnkgc2VhcmNpbmcgaW50byBsb2NrZWRSZWZzIGZvciBlbnRyeVxuICAgICAqL1xuICAgIGlzTG9ja2VkKGl0ZW06IFQpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNlbGVjdHMgb3IgZGVzZWxlY3RzIGFsbCBjdXJyZW50bHkgZGlzcGxheWVkIGl0ZW1zXG4gICAgICovXG4gICAgdG9nZ2xlQWxsKCk6IHZvaWQ7XG59XG4iXX0=