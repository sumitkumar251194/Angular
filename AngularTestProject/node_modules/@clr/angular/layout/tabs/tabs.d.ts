import { AfterContentInit, ElementRef, OnDestroy } from '@angular/core';
import { IfActiveService } from '../../utils/conditional/if-active.service';
import { ClrKeyFocus } from '../../utils/focus/key-focus/key-focus';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { TabsLayout } from './enums/tabs-layout.enum';
import { TabsService } from './providers/tabs.service';
import { ClrTabLink } from './tab-link.directive';
import * as ɵngcc0 from '@angular/core';
export declare class ClrTabs implements AfterContentInit, OnDestroy {
    ifActiveService: IfActiveService;
    toggleService: ClrPopoverToggleService;
    tabsService: TabsService;
    tabsId: number;
    commonStrings: ClrCommonStringsService;
    private subscriptions;
    private get overflowPosition();
    private set tabContentViewContainer(value);
    set layout(layout: TabsLayout);
    get layout(): TabsLayout;
    private tabs;
    private _tabLinkDirectives;
    get tabLinkDirectives(): ClrTabLink[];
    tabLinkElements: HTMLElement[];
    keyFocus: ClrKeyFocus;
    constructor(ifActiveService: IfActiveService, toggleService: ClrPopoverToggleService, tabsService: TabsService, tabsId: number, commonStrings: ClrCommonStringsService);
    get activeTabInOverflow(): boolean;
    get activeTabPosition(): number;
    get tabIds(): string;
    get isCurrentInOverflow(): boolean;
    get isVertical(): boolean;
    toggleOverflowOnPosition(position: number): void;
    private _tabOverflowEl;
    set tabOverflowEl(value: ElementRef);
    resetKeyFocusCurrentToActive(event: FocusEvent): void;
    toggleOverflowOnClick(): void;
    _mousedown: boolean;
    openOverflowOnFocus(): void;
    closeOnFocusOut(event: FocusEvent): void;
    closeOnEscapeKey(): void;
    closeOnOutsideClick(event: Event, tabOverflowTrigger: HTMLElement): void;
    private listenForTabLinkChanges;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrTabs>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrTabs, "clr-tabs", never, {
    "layout": "clrLayout";
}, {}, ["tabs"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy5kLnRzIiwic291cmNlcyI6WyJ0YWJzLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQVFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBFbGVtZW50UmVmLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElmQWN0aXZlU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL2NvbmRpdGlvbmFsL2lmLWFjdGl2ZS5zZXJ2aWNlJztcbmltcG9ydCB7IENscktleUZvY3VzIH0gZnJvbSAnLi4vLi4vdXRpbHMvZm9jdXMva2V5LWZvY3VzL2tleS1mb2N1cyc7XG5pbXBvcnQgeyBDbHJDb21tb25TdHJpbmdzU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL2kxOG4vY29tbW9uLXN0cmluZ3Muc2VydmljZSc7XG5pbXBvcnQgeyBDbHJQb3BvdmVyVG9nZ2xlU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL3BvcG92ZXIvcHJvdmlkZXJzL3BvcG92ZXItdG9nZ2xlLnNlcnZpY2UnO1xuaW1wb3J0IHsgVGFic0xheW91dCB9IGZyb20gJy4vZW51bXMvdGFicy1sYXlvdXQuZW51bSc7XG5pbXBvcnQgeyBUYWJzU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL3RhYnMuc2VydmljZSc7XG5pbXBvcnQgeyBDbHJUYWJMaW5rIH0gZnJvbSAnLi90YWItbGluay5kaXJlY3RpdmUnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2xyVGFicyBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG4gICAgaWZBY3RpdmVTZXJ2aWNlOiBJZkFjdGl2ZVNlcnZpY2U7XG4gICAgdG9nZ2xlU2VydmljZTogQ2xyUG9wb3ZlclRvZ2dsZVNlcnZpY2U7XG4gICAgdGFic1NlcnZpY2U6IFRhYnNTZXJ2aWNlO1xuICAgIHRhYnNJZDogbnVtYmVyO1xuICAgIGNvbW1vblN0cmluZ3M6IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlO1xuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9ucztcbiAgICBwcml2YXRlIGdldCBvdmVyZmxvd1Bvc2l0aW9uKCk7XG4gICAgcHJpdmF0ZSBzZXQgdGFiQ29udGVudFZpZXdDb250YWluZXIodmFsdWUpO1xuICAgIHNldCBsYXlvdXQobGF5b3V0OiBUYWJzTGF5b3V0KTtcbiAgICBnZXQgbGF5b3V0KCk6IFRhYnNMYXlvdXQ7XG4gICAgcHJpdmF0ZSB0YWJzO1xuICAgIHByaXZhdGUgX3RhYkxpbmtEaXJlY3RpdmVzO1xuICAgIGdldCB0YWJMaW5rRGlyZWN0aXZlcygpOiBDbHJUYWJMaW5rW107XG4gICAgdGFiTGlua0VsZW1lbnRzOiBIVE1MRWxlbWVudFtdO1xuICAgIGtleUZvY3VzOiBDbHJLZXlGb2N1cztcbiAgICBjb25zdHJ1Y3RvcihpZkFjdGl2ZVNlcnZpY2U6IElmQWN0aXZlU2VydmljZSwgdG9nZ2xlU2VydmljZTogQ2xyUG9wb3ZlclRvZ2dsZVNlcnZpY2UsIHRhYnNTZXJ2aWNlOiBUYWJzU2VydmljZSwgdGFic0lkOiBudW1iZXIsIGNvbW1vblN0cmluZ3M6IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlKTtcbiAgICBnZXQgYWN0aXZlVGFiSW5PdmVyZmxvdygpOiBib29sZWFuO1xuICAgIGdldCBhY3RpdmVUYWJQb3NpdGlvbigpOiBudW1iZXI7XG4gICAgZ2V0IHRhYklkcygpOiBzdHJpbmc7XG4gICAgZ2V0IGlzQ3VycmVudEluT3ZlcmZsb3coKTogYm9vbGVhbjtcbiAgICBnZXQgaXNWZXJ0aWNhbCgpOiBib29sZWFuO1xuICAgIHRvZ2dsZU92ZXJmbG93T25Qb3NpdGlvbihwb3NpdGlvbjogbnVtYmVyKTogdm9pZDtcbiAgICBwcml2YXRlIF90YWJPdmVyZmxvd0VsO1xuICAgIHNldCB0YWJPdmVyZmxvd0VsKHZhbHVlOiBFbGVtZW50UmVmKTtcbiAgICByZXNldEtleUZvY3VzQ3VycmVudFRvQWN0aXZlKGV2ZW50OiBGb2N1c0V2ZW50KTogdm9pZDtcbiAgICB0b2dnbGVPdmVyZmxvd09uQ2xpY2soKTogdm9pZDtcbiAgICBfbW91c2Vkb3duOiBib29sZWFuO1xuICAgIG9wZW5PdmVyZmxvd09uRm9jdXMoKTogdm9pZDtcbiAgICBjbG9zZU9uRm9jdXNPdXQoZXZlbnQ6IEZvY3VzRXZlbnQpOiB2b2lkO1xuICAgIGNsb3NlT25Fc2NhcGVLZXkoKTogdm9pZDtcbiAgICBjbG9zZU9uT3V0c2lkZUNsaWNrKGV2ZW50OiBFdmVudCwgdGFiT3ZlcmZsb3dUcmlnZ2VyOiBIVE1MRWxlbWVudCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBsaXN0ZW5Gb3JUYWJMaW5rQ2hhbmdlcztcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19